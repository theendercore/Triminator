import {BlobReader, BlobWriter, TextReader, ZipWriter} from "@zip.js/zip.js";
import {format, resolveDataPackVersion} from "../Util";
import {genLang, genPackMeta, genPatternJSON, genPatternRecipe, genTrimAtlases} from "./genFiles";

async function genDatapack(packData: PackContextData) {
    const zipWriter = new ZipWriter(new BlobWriter());
    await Promise.all([
        zipWriter.add(
            `pack.mcmeta`,
            new TextReader(
                format(
                    genPackMeta(
                        resolveDataPackVersion(packData.version),
                        `${packData.description}\nDatapack generated by\nTriminator`
                    )
                )
            )
        ),
        zipWriter.add(
            `pack.png`,
            new BlobReader(packData.icon || await fetch("./img/dr_doof.png").then(e => e.blob()))
        ),
    ]);
    for (const pat of packData.patterns) {
        await zipWriter.add(
            `data/${packData.namespace}/recipes/${pat.name}_armor_trim.json`,
            new TextReader(format(genPatternRecipe(pat.item)))
        )
        await zipWriter.add(
            `data/${packData.namespace}/trim_pattern/${pat.name}.json`,
            new TextReader(format(genPatternJSON(packData.namespace, pat.name, pat.translation, pat.item)))
        )
    }
    return URL.createObjectURL(await zipWriter.close());
}


async function genResourcePack(packData: PackContextData) {
    const zipWriter = new ZipWriter(new BlobWriter());
    await Promise.all([
        zipWriter.add(
            `pack.mcmeta`,
            new TextReader(format(genPackMeta(
                resolveDataPackVersion(packData.version),
                `${packData.description}\nResource Pack by\nTriminator`
            )))
        ),
        zipWriter.add(
            `pack.png`,
            new BlobReader(packData.icon || await fetch("./img/dr_doof.png").then(e => e.blob()))
        ),
        zipWriter.add(
            `assets/${packData.namespace}/lang/en_us.json`,
            new TextReader(format(
                genLang(packData.namespace,
                    packData.patterns.map(({name}) => name),
                    packData.patterns.map(({translation}) => translation))))
        ),
        zipWriter.add(
            `assets/minecraft/atlases/armor_trims.json`,
            new TextReader(format(genTrimAtlases(packData.namespace, packData.patterns.map(({name}) => name))))
        ),
    ]);
    for (const pat of packData.patterns) {
        await zipWriter.add(
            `assets/${packData.namespace}/textures/trims/models/armor/${pat.name}.png`,
            new BlobReader(pat.baseTexture!)
        )
        await zipWriter.add(
            `assets/${packData.namespace}/textures/trims/models/armor/${pat.name}_leggings.png`,
            new BlobReader(pat.leggingsTexture!)
        )
    }
    return URL.createObjectURL(await zipWriter.close());
}


export {genDatapack, genResourcePack}

